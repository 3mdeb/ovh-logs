#!/usr/bin/env bash
# This script was generated by bashly 1.0.1 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
ovh_logs_usage() {
  if [[ -n $long_usage ]]; then
    printf "ovh-logs - Script downloading logs from OVH Website Hosting\n"
    echo

  else
    printf "ovh-logs - Script downloading logs from OVH Website Hosting\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  ovh-logs COMMAND\n"
  printf "  ovh-logs [COMMAND] --help | -h\n"
  printf "  ovh-logs --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Download logs from a given month\n" "download"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "Environment Variables:"

    # :environment_variable.usage
    printf "  %s\n" "OVH_USER (required)"
    printf "    User name for accessing OVH logs\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "OVH_PASSWORD (required)"
    printf "    Password for accessing OVH logs\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "OVH_URL (required)"
    printf "    OVH URL for downloading logs. E.g.: logs.clusterxxx.hosting.ovh.net\n"
    echo

  fi
}

# :command.usage
ovh_logs_download_usage() {
  if [[ -n $long_usage ]]; then
    printf "ovh-logs download - Download logs from a given month\n"
    echo

  else
    printf "ovh-logs download - Download logs from a given month\n"
    echo

  fi

  printf "Alias: d\n"
  echo

  printf "%s\n" "Usage:"
  printf "  ovh-logs download DOMAIN MONTH YEAR [OUTPUT]\n"
  printf "  ovh-logs download --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "DOMAIN"
    printf "    Domain to download logs for. E.g.: my.website.com\n"
    echo

    # :argument.usage
    printf "  %s\n" "MONTH"
    printf "    Month to download logs for\n"
    echo

    # :argument.usage
    printf "  %s\n" "YEAR"
    printf "    Year to download logs for\n"
    echo

    # :argument.usage
    printf "  %s\n" "OUTPUT"
    printf "    Path to the output directory. Defaults to: ./logs\n"
    printf "    Default: ./logs\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  ovh-logs download my.website.com 1 2023\n"
    printf "  ovh-logs download website.com 12 2022 /tmp/ovh-logs\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.command_functions
# :command.function
ovh_logs_download_command() {
  # src/download_command.sh
  # SPDX-FileCopyrightText: 2023 3mdeb <contact@3mdeb.com>
  #
  # SPDX-License-Identifier: MIT

  MONTH="${args[month]}"
  YEAR="${args[year]}"
  DOMAIN="${args[domain]}"
  OUTPUT="${args[output]}"

  case "${MONTH}" in
    "01" );;
    "02" );;
    "03" );;
    "04" );;
    "05" );;
    "06" );;
    "07" );;
    "08" );;
    "09" );;
    "10" );;
    "11" );;
    "12" );;
    *)
      echo "MONTH must be in a range: 01-12"
      exit 1
      ;;
  esac

  # FIXME: It is not perfect input validation, but we do not care too much
  case "${YEAR}" in
    2??? );;
    *)
      echo "YEAR must be in a range: 2000-2999"
      exit 1
      ;;
  esac

  mkdir -p "${OUTPUT}"

  wget \
    --http-user="${OVH_USER}" \
    --http-password="${OVH_PASSWORD}" \
    --accept *gz \
    -r \
    -nd \
    --directory-prefix "${OUTPUT}" \
    ""${OVH_URL}"/"${DOMAIN}"/logs/logs-${MONTH}-${YEAR}/"

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        ovh_logs_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.environment_variables_filter

  if [[ -z "${OVH_USER:-}" ]]; then
    printf "missing required environment variable: OVH_USER\n" >&2
    exit 1
  fi
  if [[ -z "${OVH_PASSWORD:-}" ]]; then
    printf "missing required environment variable: OVH_PASSWORD\n" >&2
    exit 1
  fi
  if [[ -z "${OVH_URL:-}" ]]; then
    printf "missing required environment variable: OVH_URL\n" >&2
    exit 1
  fi

  # :command.dependencies_filter

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    download | d)
      action="download"
      shift
      ovh_logs_download_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      ovh_logs_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
ovh_logs_download_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        ovh_logs_download_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter

  # :command.command_filter
  action="download"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['domain']+x} ]]; then

          args['domain']=$1
          shift
        elif [[ -z ${args['month']+x} ]]; then

          args['month']=$1
          shift
        elif [[ -z ${args['year']+x} ]]; then

          args['year']=$1
          shift
        elif [[ -z ${args['output']+x} ]]; then

          args['output']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['domain']+x} ]]; then
    printf "missing required argument: DOMAIN\nusage: ovh-logs download DOMAIN MONTH YEAR [OUTPUT]\n" >&2
    exit 1
  fi
  if [[ -z ${args['month']+x} ]]; then
    printf "missing required argument: MONTH\nusage: ovh-logs download DOMAIN MONTH YEAR [OUTPUT]\n" >&2
    exit 1
  fi
  if [[ -z ${args['year']+x} ]]; then
    printf "missing required argument: YEAR\nusage: ovh-logs download DOMAIN MONTH YEAR [OUTPUT]\n" >&2
    exit 1
  fi

  # :command.default_assignments
  [[ -n ${args['output']:-} ]] || args['output']="./logs"

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # src/initialize.sh
  # SPDX-FileCopyrightText: 2023 3mdeb <contact@3mdeb.com>
  #
  # SPDX-License-Identifier: MIT


}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "download")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        ovh_logs_download_usage
      else
        ovh_logs_download_command
      fi
      ;;

  esac
}

initialize
run "$@"
